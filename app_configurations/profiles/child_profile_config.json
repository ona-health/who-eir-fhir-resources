{
  "appId": "eir",
  "configType": "profile",
  "id": "childProfile",
  "fhirResource": {
    "baseResource": {
      "resource": "Patient"
    },
    "relatedResources": [
      {
        "id": "availableConditions",
        "resource": "Condition",
        "searchParameter": "subject"
      },
      {
        "resource": "CarePlan",
        "searchParameter": "subject"
      },
      {
        "id": "availableTasks",
        "resource": "Task",
        "searchParameter": "subject",
        "sortConfigs": [
          {
            "paramName": "period",
            "dataType": "DATE"
          }
        ]
      },
      {
        "id": "availableImmunizations",
        "resource": "Immunization",
        "searchParameter": "patient"
      }
    ]
  },
  "topAppBar": {
    "title": {
      "viewType": "COMPOUND_TEXT",
      "primaryText": "@{patientName} profile",
      "primaryTextColor": "#FFFFFF",
      "fontSize": 16.0,
      "maxLines": 1,
      "primaryTextFontWeight": "BOLD"
    },
    "collapsible": false
  },
  "rules": [
    {
      "name": "patientFirstName",
      "condition": "true",
      "actions": [
        "data.put('patientFirstName', fhirPath.extractValue(Patient, \"Patient.name[0].select(given[0])\"))"
      ]
    },
    {
      "name": "patientMiddleName",
      "condition": "true",
      "actions": [
        "data.put('patientMiddleName', fhirPath.extractValue(Patient, \"Patient.name[0].select(text)\"))"
      ]
    },
    {
      "name": "patientLastName",
      "condition": "true",
      "actions": [
        "data.put('patientLastName', fhirPath.extractValue(Patient, \"Patient.name[0].select(family)\"))"
      ]
    },
    {
      "name": "patientName",
      "condition": "true",
      "priority": 2,
      "actions": [
        "data.put('patientName', data.get('patientFirstName') + ' ' + data.get('patientMiddleName') + ' ' + data.get('patientLastName'))"
      ]
    },
    {
      "name": "patientActive",
      "condition": "true",
      "actions": [
        "data.put('patientActive', fhirPath.extractValue(Patient, 'Patient.active'))"
      ]
    },
    {
      "name": "inactivePatient",
      "condition": "true",
      "actions": [
        "data.put('inactivePatient', !data.get('patientActive'))"
      ]
    },
    {
      "name": "patientDod",
      "condition": "true",
      "priority": 1,
      "actions": [
        "data.put('patientDod', fhirPath.extractValue(Patient, 'Patient.deceased'))"
      ]
    },
    {
      "name": "patientDodFormatted",
      "condition": "true",
      "priority": 2,
      "actions": [
        "data.put('patientDodFormatted', service.formatDate(data.get('patientDod'), \"yyyy-MM-dd'T'HH:mm:ss.SSXXX\", \"dd MMM, yyyy\"))"
      ]
    },
    {
      "name": "patientDeceased",
      "condition": "true",
      "priority": 2,
      "actions": [
        "data.put('patientDeceased', data.get('patientDod').empty().not())"
      ]
    },
    {
      "name": "patientMuted",
      "condition": "true",
      "priority": 3,
      "actions": [
        "data.put('patientMuted', !data.get('patientActive') && data.get('patientDod').empty())"
      ]
    },
    {
      "name": "patientTextColor",
      "condition": "true",
      "priority": 4,
      "actions": [
        "data.put('patientTextColor', data.get('patientMuted') == 'true' || data.get('patientDeceased') == 'true' ? '#6F7274' : '#000000')"
      ]
    },
    {
      "name": "patientIdentifier",
      "condition": "true",
      "actions": [
        "data.put('patientIdentifier', fhirPath.extractValue(Patient, 'Patient.identifier[0].value'))"
      ]
    },
    {
      "name": "patientId",
      "condition": "true",
      "actions": [
        "data.put('patientId', fhirPath.extractValue(Patient, 'Patient.id'))"
      ]
    },
    {
      "name": "patientAge",
      "condition": "true",
      "actions": [
        "data.put('patientAge', service.extractAge(Patient))"
      ]
    },
    {
      "name": "patientAgeInYears",
      "condition": "true",
      "actions": [
        "data.put('patientAgeInYears', fhirPath.extractValue(Patient, \"(today().toString().substring(0, 4).toInteger() - Patient.birthDate.toString().substring(0, 4).toInteger())\"))"
      ]
    },
    {
      "name": "childCardVisible",
      "condition": "true",
      "actions": [
        "data.put('childCardVisible', data.get('patientAge') == 'true' && data.get('patientAge')<=5)"
      ]
    },
    {
      "name": "patientGender",
      "condition": "true",
      "actions": [
        "data.put('patientGender', service.extractGender(Patient))"
      ]
    },
    {
      "name": "patientDOB",
      "condition": "true",
      "actions": [
        "data.put('patientDOB', service.extractDOB(Patient, 'dd/MM/yyyy'))"
      ]
    },
    {
      "name": "birthDate",
      "condition": "true",
      "actions": [
        "data.put('birthDate', fhirPath.extractValue(Patient, 'Patient.birthDate'))"
      ]
    },
    {
      "name": "isChild",
      "condition": "true",
      "actions": [
        "data.put('isChild', fhirPath.extractValue(Patient, \"Patient.active and (Patient.birthDate >= today() - 5 'years')\"))"
      ]
    },
    {
      "name": "is9Years",
      "condition": "true",
      "actions": [
        "data.put('is9Years', fhirPath.extractValue(Patient, \"Patient.active and (Patient.birthDate >= today() - 9 'years')\"))",
        "data.put('is9andHalfYears', fhirPath.extractValue(Patient, \"Patient.active and (Patient.birthDate >= today() - 9.5 'years')\"))"
      ]
    },
    {
      "name": "isChildUnder2months",
      "condition": "true",
      "actions": [
        "data.put('isChildUnder2months', fhirPath.extractValue(Patient, \"Patient.active and ((Patient.birthDate >= today() - 2 'months') and (Patient.birthDate < today() - 14 'weeks'))\"))"
      ]
    },
    {
      "name": "isChildOver2months",
      "condition": "true",
      "actions": [
        "data.put('isChildOver2months', fhirPath.extractValue(Patient, \"Patient.active and ((Patient.birthDate <= today() - 2 'months') and (Patient.birthDate > today() - 9 'months'))\"))"
      ]
    },
    {
      "name": "isChildOverSixWeeks",
      "condition": "true",
      "actions": [
        "data.put('isChildOverSixWeeks', fhirPath.extractValue(Patient, \"Patient.active and ((Patient.birthDate <= today() - 6 'weeks') and (Patient.birthDate > today() - 10 'weeks'))\"))"
      ]
    },
    {
      "name": "isChildUnderSixWeeks",
      "condition": "true",
      "actions": [
        "data.put('isChildUnderSixWeeks', fhirPath.extractValue(Patient, \"Patient.active and ((Patient.birthDate >= today() - 6 'weeks'))\"))"
      ]
    },
    {
      "name": "isChildOverTenWeeks",
      "condition": "true",
      "actions": [
        "data.put('isChildOverTenWeeks', fhirPath.extractValue(Patient, \"Patient.active and ((Patient.birthDate <= today() - 10 'weeks') and (Patient.birthDate > today() - 14 'weeks'))\"))"
      ]
    },
    {
      "name": "isChildOverFourteenWeeks",
      "condition": "true",
      "actions": [
        "data.put('isChildOverFourteenWeeks', fhirPath.extractValue(Patient, \"Patient.active and ((Patient.birthDate <= today() - 14 'weeks') and (Patient.birthDate > today() - 2 'months'))\"))"
      ]
    },
    {
      "name": "isChildOverNineMonths",
      "condition": "true",
      "actions": [
        "data.put('isChildOverNineMonths', fhirPath.extractValue(Patient, \"Patient.active and ((Patient.birthDate <= today() - 9 'months') and (Patient.birthDate > today() - 15 'months'))\"))"
      ]
    },
    {
      "name": "isChildOverFifteenMonths",
      "condition": "true",
      "actions": [
        "data.put('isChildOverFifteenMonths', fhirPath.extractValue(Patient, \"Patient.active and ((Patient.birthDate <= today() - 15 'months') and (Patient.birthDate > today() - 5 'years'))\"))"
      ]
    },
    {
      "name": "isChildOverEighteenteenMonths",
      "condition": "true",
      "actions": [
        "data.put('isChildOverEighteenteenMonths', fhirPath.extractValue(Patient, \"Patient.active and ((Patient.birthDate <= today() - 18 'months') and (Patient.birthDate > today() - 5 'years'))\"))"
      ]
    },
    {
      "name": "isTaskMoreThanOne",
      "condition": "true",
      "actions": [
        "data.put( 'atBirthTasksMoreThan1', service.filterResources(availableTasks, \"(Task.status = 'ready' or Task.status = 'failed' or Task.status = 'cancelled 'or Task.status = 'requested') and Task.groupIdentifier.value = '0_d'\").size() > 1 )",
        "data.put( 'atSixWeeksTasksMoreThan1', service.filterResources(availableTasks, \"(Task.status = 'ready' or Task.status = 'failed' or Task.status = 'cancelled 'or Task.status = 'requested') and Task.groupIdentifier.value = '6_wk'\").size() > 1 )",
        "data.put( 'atTenWeeksTasksMoreThan1', service.filterResources(availableTasks, \"(Task.status = 'ready' or Task.status = 'failed' or Task.status = 'cancelled 'or Task.status = 'requested') and Task.groupIdentifier.value = '10_wk'\").size() > 1 )",
        "data.put( 'atFourteenWeeksTasksMoreThan1', service.filterResources(availableTasks, \"(Task.status = 'ready' or Task.status = 'failed' or Task.status = 'cancelled 'or Task.status = 'requested') and Task.groupIdentifier.value = '14_wk'\").size() > 1 )",
        "data.put( 'atNineMonthsTasksMoreThan1', service.filterResources(availableTasks, \"(Task.status = 'ready' or Task.status = 'failed' or Task.status = 'cancelled 'or Task.status = 'requested') and Task.groupIdentifier.value = '9_mo'\").size() > 1 )",
        "data.put( 'atFifteenMonthsTasksMoreThan1', service.filterResources(availableTasks, \"(Task.status = 'ready' or Task.status = 'failed' or Task.status = 'cancelled 'or Task.status = 'requested') and Task.groupIdentifier.value = '15_mo'\").size() > 1 )",
        "data.put( 'atEighteenMonthsTasksMoreThan1', service.filterResources(availableTasks, \"(Task.status = 'ready' or Task.status = 'failed' or Task.status = 'cancelled 'or Task.status = 'requested') and Task.groupIdentifier.value = '18_mo'\").size() > 1 )"
      ]
    },
    {
      "name": "showAtBirthTasks",
      "condition": "true",
      "actions": [
        "data.put( 'showAtBirthTasks', service.filterResources(availableTasks, \"(Task.status = 'ready' or Task.status = 'failed' or Task.status = 'cancelled 'or Task.status = 'requested') and Task.groupIdentifier.value = '0_d'\").size() > 0 )"
      ]
    },
    {
      "name": "showAtSixWeeksTasks",
      "condition": "true",
      "actions": [
        "data.put( 'showAtSixWeeksTasks', service.filterResources(availableTasks, \"(Task.status = 'ready' or Task.status = 'failed' or Task.status = 'cancelled 'or Task.status = 'requested') and Task.groupIdentifier.value = '6_wk'\").size() > 0 )"
      ]
    },
    {
      "name": "showAtTenWeeksTasks",
      "condition": "true",
      "actions": [
        "data.put( 'showAtTenWeeksTasks', service.filterResources(availableTasks, \"(Task.status = 'ready' or Task.status = 'failed' or Task.status = 'cancelled 'or Task.status = 'requested') and Task.groupIdentifier.value = '10_wk'\").size() > 0 )"
      ]
    },
    {
      "name": "showAtFourteenWeeksTasks",
      "condition": "true",
      "actions": [
        "data.put( 'showAtFourteenWeeksTasks', service.filterResources(availableTasks, \"(Task.status = 'ready' or Task.status = 'failed' or Task.status = 'cancelled 'or Task.status = 'requested') and Task.groupIdentifier.value = '14_wk'\").size() > 0 )"
      ]
    },
    {
      "name": "showAtNineMonthsTasks",
      "condition": "true",
      "actions": [
        "data.put( 'showAtNineMonthsTasks', service.filterResources(availableTasks, \"(Task.status = 'ready' or Task.status = 'failed' or Task.status = 'cancelled 'or Task.status = 'requested') and Task.groupIdentifier.value = '9_mo'\").size() > 0 )"
      ]
    },
    {
      "name": "showAtFifteenMonthsTasks",
      "condition": "true",
      "actions": [
        "data.put( 'showAtFifteenMonthsTasks', service.filterResources(availableTasks, \"(Task.status = 'ready' or Task.status = 'failed' or Task.status = 'cancelled 'or Task.status = 'requested') and Task.groupIdentifier.value = '15_mo'\").size() > 0 )"
      ]
    },
    {
      "name": "showAtEighteenMonthsTasks",
      "condition": "true",
      "actions": [
        "data.put( 'showAtEighteenMonthsTasks', service.filterResources(availableTasks, \"(Task.status = 'ready' or Task.status = 'failed' or Task.status = 'cancelled 'or Task.status = 'requested') and Task.groupIdentifier.value = '18_mo'\").size() > 0 )"
      ]
    },
    {
      "name": "hideReviewImmunizationIfTaskIsGenerated",
      "priority": 2,
      "condition": "true",
      "actions": [
        "data.put('hideReviewImmunizationIfTaskIsGenerated', !data.get('showAtBirthTasks'))"
      ]
    }
  ],
  "views": [
    {
      "viewType": "CARD",
      "padding": 0,
      "content": [
        {
          "viewType": "COLUMN",
          "children": [
            {
              "viewType": "COMPOUND_TEXT",
              "primaryText": "@{patientName}",
              "primaryTextColor": "@{patientTextColor}"
            },
            {
              "visible": "@{patientMuted}",
              "viewType": "COMPOUND_TEXT",
              "primaryText": "{{ patient.is.muted }}",
              "fontSize": 12.0,
              "primaryTextColor": "#FF0000"
            },
            {
              "visible": "@{patientDeceased}",
              "viewType": "COMPOUND_TEXT",
              "primaryText": "Deceased: @{patientDodFormatted}",
              "fontSize": 12.0,
              "primaryTextColor": "#FF0000"
            },
            {
              "viewType": "SPACER",
              "height": 10
            },
            {
              "viewType": "COMPOUND_TEXT",
              "primaryText": "ID: #@{patientIdentifier}",
              "primaryTextColor": "@{patientTextColor}"
            },
            {
              "viewType": "SPACER",
              "height": 10
            },
            {
              "viewType": "PERSONAL_DATA",
              "personalDataItems": [
                {
                  "label": {
                    "viewType": "COMPOUND_TEXT",
                    "primaryText": "Sex",
                    "primaryTextColor": "@{patientTextColor}"
                  },
                  "displayValue": {
                    "viewType": "COMPOUND_TEXT",
                    "primaryText": "@{patientGender}",
                    "fontSize": 14,
                    "primaryTextColor": "@{patientTextColor}"
                  }
                },
                {
                  "label": {
                    "viewType": "COMPOUND_TEXT",
                    "primaryText": "Age",
                    "primaryTextColor": "@{patientTextColor}"
                  },
                  "displayValue": {
                    "viewType": "COMPOUND_TEXT",
                    "primaryText": "@{patientAge}",
                    "fontSize": 14,
                    "primaryTextColor": "@{patientTextColor}"
                  }
                },
                {
                  "label": {
                    "viewType": "COMPOUND_TEXT",
                    "primaryText": "DOB",
                    "primaryTextColor": "@{patientTextColor}"
                  },
                  "displayValue": {
                    "viewType": "COMPOUND_TEXT",
                    "primaryText": "@{patientDOB}",
                    "fontSize": 14,
                    "primaryTextColor": "@{patientTextColor}"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "viewType": "SPACER",
      "height": 8
    },
    {
      "viewType": "COLUMN",
      "children": [
        {
          "viewType": "CARD",
          "visible": "@{hideReviewImmunizationIfTaskIsGenerated}",
          "padding": 16,
          "header": {
            "viewType": "COMPOUND_TEXT",
            "primaryText": "WORKFLOW",
            "primaryTextColor": "#6F7274",
            "fontSize": 18.0,
            "padding": 16
          },
          "content": [
            {
              "viewType": "COLUMN",
              "children": [
                {
                  "viewType": "BUTTON",
                  "smallSized": "true",
                  "text": "Review Child Immunizations",
                  "status": "DUE",
                  "visible": "true",
                  "clickable": "true",
                  "enabled": "@{patientActive}",
                  "actions": [
                    {
                      "trigger": "ON_CLICK",
                      "workflow": "LAUNCH_QUESTIONNAIRE",
                      "questionnaire": {
                        "id": "6b972208-dcf2-442e-b02f-d0eca48b354a",
                        "title": "Non-IG Immunization CarePlan",
                        "saveButtonText": "Save",
                        "resourceIdentifier": "@{patientId}",
                        "planDefinitions": [
                          "254efa5e-92be-4735-a652-e2990d549c30"
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "viewType": "SPACER",
      "height": 8
    },
    {
      "viewType": "COLUMN",
      "children": [
        {
          "viewType": "CARD",
          "visible": "@{showAtBirthTasks}",
          "padding": 16,
          "header": {
            "viewType": "COMPOUND_TEXT",
            "primaryText": "Immunizations at Birth",
            "primaryTextColor": "#6F7274",
            "fontSize": 18.0,
            "padding": 16
          },
          "headerAction": {
            "viewType": "COMPOUND_TEXT",
            "visible": "@{atBirthTasksMoreThan1}",
            "primaryText": "Record all",
            "primaryTextColor": "infoColor",
            "fontSize": 18.0,
            "padding": 16,
            "clickable": true,
            "maxLines": 1,
            "textOverflow": "ELLIPSIS",
            "primaryTextActions": [
              {
                "trigger": "ON_CLICK",
                "workflow": "LAUNCH_QUESTIONNAIRE",
                "questionnaire": {
                  "id": "8293",
                  "title": "Record all immunizations",
                  "resourceIdentifier": "@{patientId}",
                  "saveButtonText": "Save",
                  "taskId": "@{taskId}"
                }
              }
            ]
          },
          "content": [
            {
              "viewType": "LIST",
              "id": "atBirthTaskList",
              "resources": [
                {
                  "id": "availableTasks",
                  "relatedResourceId": "availableTasks",
                  "resourceType": "Task",
                  "conditionalFhirPathExpression": "(Task.status = 'ready' or Task.status = 'failed' or Task.status = 'cancelled 'or Task.status = 'requested') and Task.groupIdentifier.value = '0_d'"
                }
              ],
              "emptyList": {
                "message": "No visit tasks available for this patient at the moment"
              },
              "registerCard": {
                "rules": [
                  {
                    "name": "taskStatus",
                    "condition": "true",
                    "actions": [
                      "data.put('taskStatus', fhirPath.extractValue(Task, 'Task.status'))"
                    ]
                  },
                  {
                    "name": "taskStatusColorCode",
                    "condition": "true",
                    "actions": [
                      "data.put('taskStatusColorCode', service.generateTaskServiceStatus(Task))"
                    ]
                  },
                  {
                    "name": "taskExecutionStartDate",
                    "condition": "true",
                    "actions": [
                      "data.put('taskExecutionStartDate', fhirPath.extractValue(Task, 'Task.executionPeriod.start'))"
                    ]
                  },
                  {
                    "name": "taskPeriodDueDate",
                    "condition": "true",
                    "actions": [
                      "data.put('taskPeriodDueDate', service.formatDate(data.get('taskExecutionStartDate'), \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"dd/MMM/yyyy\"))"
                    ]
                  },
                  {
                    "name": "taskDescription",
                    "condition": "true",
                    "actions": [
                      "data.put('taskDescription', fhirPath.extractValue(Task, 'Task.description'))"
                    ]
                  },
                  {
                    "name": "taskDescriptionWithStartDate",
                    "condition": "true",
                    "priority": 2,
                    "actions": [
                      "data.put('taskDescriptionWithStartDate', data.get('taskDescription') + ' (' + data.get('taskPeriodDueDate') + ')')"
                    ]
                  },
                  {
                    "name": "taskId",
                    "condition": "true",
                    "actions": [
                      "data.put('taskId', fhirPath.extractValue(Task, 'Task.id'))"
                    ]
                  },
                  {
                    "name": "taskFor",
                    "condition": "true",
                    "actions": [
                      "data.put('taskFor', fhirPath.extractValue(Task, 'Task.for.reference'))"
                    ]
                  },
                  {
                    "name": "taskQuestionnaireId",
                    "condition": "true",
                    "actions": [
                      "data.put('taskQuestionnaireId', fhirPath.extractValue(Task, 'Task.reasonReference.reference'))"
                    ]
                  },
                  {
                    "name": "taskName",
                    "condition": "true",
                    "actions": [
                      "data.put('taskName', fhirPath.extractValue(Task, 'Task.reasonCode.coding.display'))"
                    ]
                  },
                  {
                    "name": "taskCode",
                    "condition": "true",
                    "actions": [
                      "data.put('taskCode', fhirPath.extractValue(Task, 'Task.reasonCode.coding.code'))"
                    ]
                  }
                ],
                "views": [
                  {
                    "viewType": "BUTTON",
                    "smallSized": "true",
                    "text": "@{taskDescriptionWithStartDate}",
                    "status": "@{taskStatusColorCode}",
                    "visible": "true",
                    "clickable": "true",
                    "enabled": "@{patientActive}",
                    "actions": [
                      {
                        "trigger": "ON_CLICK",
                        "workflow": "LAUNCH_QUESTIONNAIRE",
                        "questionnaire": {
                          "id": "@{taskQuestionnaireId}",
                          "title": "@{taskDescription}",
                          "saveButtonText": "Save",
                          "taskId": "@{taskId}",
                          "resourceIdentifier": "@{taskFor}"
                        },
                        "params": [
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "patient-dob",
                            "dataType": "STRING",
                            "key": "birthDate",
                            "value": "@{birthDate}"
                          },
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "task-name",
                            "dataType": "STRING",
                            "key": "taskName",
                            "value": "@{taskName}"
                          },
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "task-code",
                            "dataType": "STRING",
                            "key": "taskCode",
                            "value": "@{taskCode}"
                          },
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "patient-id",
                            "dataType": "STRING",
                            "key": "patientId",
                            "value": "@{patientId}"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "viewType": "CARD",
          "visible": "@{showAtSixWeeksTasks}",
          "padding": 16,
          "header": {
            "viewType": "COMPOUND_TEXT",
            "primaryText": "Immunizations at 6 weeks",
            "primaryTextColor": "#6F7274",
            "fontSize": 18.0,
            "padding": 16
          },
          "headerAction": {
            "viewType": "COMPOUND_TEXT",
            "visible": "@{atSixWeeksTasksMoreThan1}",
            "primaryText": "Record All",
            "primaryTextColor": "infoColor",
            "fontSize": 18.0,
            "padding": 16,
            "clickable": true,
            "maxLines": 1,
            "textOverflow": "ELLIPSIS",
            "primaryTextActions": [
              {
                "trigger": "ON_CLICK",
                "workflow": "LAUNCH_QUESTIONNAIRE",
                "questionnaire": {
                  "id": "8293",
                  "title": "Record all immunizations",
                  "resourceIdentifier": "@{patientId}",
                  "saveButtonText": "Save",
                  "taskId": "@{taskId}"
                }
              }
            ]
          },
          "content": [
            {
              "viewType": "LIST",
              "id": "at6WeeksTaskList",
              "resources": [
                {
                  "id": "availableTasks",
                  "relatedResourceId": "availableTasks",
                  "resourceType": "Task",
                  "conditionalFhirPathExpression": "(Task.status = 'ready' or Task.status = 'failed' or Task.status = 'cancelled 'or Task.status = 'requested') and Task.groupIdentifier.value = '6_wk'"
                }
              ],
              "emptyList": {
                "message": "No visit tasks available for this patient at the moment"
              },
              "registerCard": {
                "rules": [
                  {
                    "name": "taskStatus",
                    "condition": "true",
                    "actions": [
                      "data.put('taskStatus', fhirPath.extractValue(Task, 'Task.status'))"
                    ]
                  },
                  {
                    "name": "taskStatusColorCode",
                    "condition": "true",
                    "actions": [
                      "data.put('taskStatusColorCode', service.generateTaskServiceStatus(Task))"
                    ]
                  },
                  {
                    "name": "taskExecutionStartDate",
                    "condition": "true",
                    "actions": [
                      "data.put('taskExecutionStartDate', fhirPath.extractValue(Task, 'Task.executionPeriod.start'))"
                    ]
                  },
                  {
                    "name": "taskPeriodDueDate",
                    "condition": "true",
                    "actions": [
                      "data.put('taskPeriodDueDate', service.formatDate(data.get('taskExecutionStartDate'), \"yyyy-MM-dd'T'HH:mm:ss+hh:mm\", \"dd MMM yyyy\"))"
                    ]
                  },
                  {
                    "name": "taskStatusIsDueOrOverdue",
                    "condition": "true",
                    "actions": [
                      "data.put('taskStatusIsDueOrOverdue',data.get('taskStatus').equals('ready') ? 'true' : data.get('taskStatus').equals('failed') || data.get('taskStatus').equals('cancelled') ? 'true' : 'false')"
                    ]
                  },
                  {
                    "name": "taskDescription",
                    "condition": "true",
                    "actions": [
                      "data.put('taskDescription', fhirPath.extractValue(Task, 'Task.description'))"
                    ]
                  },
                  {
                    "name": "taskDescriptionWithStartDate",
                    "condition": "true",
                    "priority": 2,
                    "actions": [
                      "data.put('taskDescriptionWithStartDate', data.get('taskDescription') + ' (' + data.get('taskPeriodDueDate') + ')')"
                    ]
                  },
                  {
                    "name": "taskId",
                    "condition": "true",
                    "actions": [
                      "data.put('taskId', fhirPath.extractValue(Task, 'Task.id'))"
                    ]
                  },
                  {
                    "name": "taskFor",
                    "condition": "true",
                    "actions": [
                      "data.put('taskFor', fhirPath.extractValue(Task, 'Task.for.reference'))"
                    ]
                  },
                  {
                    "name": "taskQuestionnaireId",
                    "condition": "true",
                    "actions": [
                      "data.put('taskQuestionnaireId', fhirPath.extractValue(Task, 'Task.reasonReference.reference'))"
                    ]
                  },
                  {
                    "name": "taskName",
                    "condition": "true",
                    "actions": [
                      "data.put('taskName', fhirPath.extractValue(Task, 'Task.reasonCode.coding.display'))"
                    ]
                  },
                  {
                    "name": "taskCode",
                    "condition": "true",
                    "actions": [
                      "data.put('taskCode', fhirPath.extractValue(Task, 'Task.reasonCode.coding.code'))"
                    ]
                  }
                ],
                "views": [
                  {
                    "viewType": "BUTTON",
                    "smallSized": "true",
                    "text": "@{taskDescriptionWithStartDate}",
                    "status": "@{taskStatusColorCode}",
                    "visible": "true",
                    "clickable": "true",
                    "enabled": "@{patientActive}",
                    "actions": [
                      {
                        "trigger": "ON_CLICK",
                        "workflow": "LAUNCH_QUESTIONNAIRE",
                        "questionnaire": {
                          "id": "@{taskQuestionnaireId}",
                          "title": "@{taskDescription}",
                          "saveButtonText": "Save",
                          "taskId": "@{taskId}",
                          "resourceIdentifier": "@{taskFor}"
                        },
                        "params": [
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "patient-dob",
                            "dataType": "STRING",
                            "key": "birthDate",
                            "value": "@{birthDate}"
                          },
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "task-name",
                            "dataType": "STRING",
                            "key": "taskName",
                            "value": "@{taskName}"
                          },
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "task-code",
                            "dataType": "STRING",
                            "key": "taskCode",
                            "value": "@{taskCode}"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "viewType": "CARD",
          "visible": "@{showAtTenWeeksTasks}",
          "padding": 16,
          "header": {
            "viewType": "COMPOUND_TEXT",
            "primaryText": "Immunizations at 10 weeks",
            "primaryTextColor": "#6F7274",
            "fontSize": 18.0,
            "padding": 16
          },
          "headerAction": {
            "viewType": "COMPOUND_TEXT",
            "visible": "@{atTenWeeksTasksMoreThan1}",
            "primaryText": "Record All",
            "primaryTextColor": "infoColor",
            "fontSize": 18.0,
            "padding": 16,
            "clickable": true,
            "maxLines": 1,
            "textOverflow": "ELLIPSIS",
            "primaryTextActions": [
              {
                "trigger": "ON_CLICK",
                "workflow": "LAUNCH_QUESTIONNAIRE",
                "questionnaire": {
                  "id": "8293",
                  "title": "Record all immunizations",
                  "resourceIdentifier": "@{patientId}",
                  "saveButtonText": "Save",
                  "taskId": "@{taskId}"
                }
              }
            ]
          },
          "content": [
            {
              "viewType": "LIST",
              "id": "at10WeeksTaskList",
              "resources": [
                {
                  "id": "availableTasks",
                  "relatedResourceId": "availableTasks",
                  "resourceType": "Task",
                  "conditionalFhirPathExpression": "(Task.status = 'ready' or Task.status = 'failed' or Task.status = 'cancelled 'or Task.status = 'requested') and Task.groupIdentifier.value = '10_wk'"
                }
              ],
              "emptyList": {
                "message": "No visit tasks available for this patient at the moment"
              },
              "registerCard": {
                "rules": [
                  {
                    "name": "taskStatus",
                    "condition": "true",
                    "actions": [
                      "data.put('taskStatus', fhirPath.extractValue(Task, 'Task.status'))"
                    ]
                  },
                  {
                    "name": "taskStatusColorCode",
                    "condition": "true",
                    "actions": [
                      "data.put('taskStatusColorCode', service.generateTaskServiceStatus(Task))"
                    ]
                  },
                  {
                    "name": "taskExecutionStartDate",
                    "condition": "true",
                    "actions": [
                      "data.put('taskExecutionStartDate', fhirPath.extractValue(Task, 'Task.executionPeriod.start'))"
                    ]
                  },
                  {
                    "name": "taskPeriodDueDate",
                    "condition": "true",
                    "actions": [
                      "data.put('taskPeriodDueDate', service.formatDate(data.get('taskExecutionStartDate'), \"yyyy-MM-dd'T'HH:mm:ss+hh:mm\", \"dd MMM yyyy\"))"
                    ]
                  },
                  {
                    "name": "taskDescription",
                    "condition": "true",
                    "actions": [
                      "data.put('taskDescription', fhirPath.extractValue(Task, 'Task.description'))"
                    ]
                  },
                  {
                    "name": "taskDescriptionWithStartDate",
                    "condition": "true",
                    "priority": 2,
                    "actions": [
                      "data.put('taskDescriptionWithStartDate', data.get('taskDescription') + ' (' + data.get('taskPeriodDueDate') + ')')"
                    ]
                  },
                  {
                    "name": "taskId",
                    "condition": "true",
                    "actions": [
                      "data.put('taskId', fhirPath.extractValue(Task, 'Task.id'))"
                    ]
                  },
                  {
                    "name": "taskFor",
                    "condition": "true",
                    "actions": [
                      "data.put('taskFor', fhirPath.extractValue(Task, 'Task.for.reference'))"
                    ]
                  },
                  {
                    "name": "taskQuestionnaireId",
                    "condition": "true",
                    "actions": [
                      "data.put('taskQuestionnaireId', fhirPath.extractValue(Task, 'Task.reasonReference.reference'))"
                    ]
                  },
                  {
                    "name": "taskName",
                    "condition": "true",
                    "actions": [
                      "data.put('taskName', fhirPath.extractValue(Task, 'Task.reasonCode.coding.display'))"
                    ]
                  },
                  {
                    "name": "taskCode",
                    "condition": "true",
                    "actions": [
                      "data.put('taskCode', fhirPath.extractValue(Task, 'Task.reasonCode.coding.code'))"
                    ]
                  }
                ],
                "views": [
                  {
                    "viewType": "BUTTON",
                    "smallSized": "true",
                    "text": "@{taskDescriptionWithStartDate}",
                    "status": "@{taskStatusColorCode}",
                    "visible": "true",
                    "clickable": "true",
                    "enabled": "@{patientActive}",
                    "actions": [
                      {
                        "trigger": "ON_CLICK",
                        "workflow": "LAUNCH_QUESTIONNAIRE",
                        "questionnaire": {
                          "id": "@{taskQuestionnaireId}",
                          "title": "@{taskDescription}",
                          "saveButtonText": "Save",
                          "taskId": "@{taskId}",
                          "resourceIdentifier": "@{taskFor}"
                        },
                        "params": [
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "patient-dob",
                            "dataType": "STRING",
                            "key": "birthDate",
                            "value": "@{birthDate}"
                          },
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "task-name",
                            "dataType": "STRING",
                            "key": "taskName",
                            "value": "@{taskName}"
                          },
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "task-code",
                            "dataType": "STRING",
                            "key": "taskCode",
                            "value": "@{taskCode}"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "viewType": "CARD",
          "visible": "@{showAtFourteenWeeksTasks}",
          "padding": 16,
          "header": {
            "viewType": "COMPOUND_TEXT",
            "primaryText": "Immunizations at 14 weeks",
            "primaryTextColor": "#6F7274",
            "fontSize": 18.0,
            "padding": 16
          },
          "headerAction": {
            "viewType": "COMPOUND_TEXT",
            "visible": "@{atFourteenWeeksTasksMoreThan1}",
            "primaryText": "Record All",
            "primaryTextColor": "infoColor",
            "fontSize": 18.0,
            "padding": 16,
            "clickable": true,
            "maxLines": 1,
            "textOverflow": "ELLIPSIS",
            "primaryTextActions": [
              {
                "trigger": "ON_CLICK",
                "workflow": "LAUNCH_QUESTIONNAIRE",
                "questionnaire": {
                  "id": "8293",
                  "title": "Record all immunizations",
                  "resourceIdentifier": "@{patientId}",
                  "saveButtonText": "Save",
                  "taskId": "@{taskId}"
                }
              }
            ]
          },
          "content": [
            {
              "viewType": "LIST",
              "id": "at14WeeksTaskList",
              "resources": [
                {
                  "id": "availableTasks",
                  "relatedResourceId": "availableTasks",
                  "resourceType": "Task",
                  "conditionalFhirPathExpression": "(Task.status = 'ready' or Task.status = 'failed' or Task.status = 'cancelled 'or Task.status = 'requested') and Task.groupIdentifier.value = '14_wk'"
                }
              ],
              "emptyList": {
                "message": "No visit tasks available for this patient at the moment"
              },
              "registerCard": {
                "rules": [
                  {
                    "name": "taskStatus",
                    "condition": "true",
                    "actions": [
                      "data.put('taskStatus', fhirPath.extractValue(Task, 'Task.status'))"
                    ]
                  },
                  {
                    "name": "taskStatusColorCode",
                    "condition": "true",
                    "actions": [
                      "data.put('taskStatusColorCode', service.generateTaskServiceStatus(Task))"
                    ]
                  },
                  {
                    "name": "taskExecutionStartDate",
                    "condition": "true",
                    "actions": [
                      "data.put('taskExecutionStartDate', fhirPath.extractValue(Task, 'Task.executionPeriod.start'))"
                    ]
                  },
                  {
                    "name": "taskPeriodDueDate",
                    "condition": "true",
                    "actions": [
                      "data.put('taskPeriodDueDate', service.formatDate(data.get('taskExecutionStartDate'), \"yyyy-MM-dd'T'HH:mm:ss+hh:mm\", \"dd MMM yyyy\"))"
                    ]
                  },
                  {
                    "name": "taskStatusIsDueOrOverdue",
                    "condition": "true",
                    "actions": [
                      "data.put('taskStatusIsDueOrOverdue',data.get('taskStatus').equals('ready') ? 'true' : data.get('taskStatus').equals('failed') || data.get('taskStatus').equals('cancelled') ? 'true' : 'false')"
                    ]
                  },
                  {
                    "name": "taskDescription",
                    "condition": "true",
                    "actions": [
                      "data.put('taskDescription', fhirPath.extractValue(Task, 'Task.description'))"
                    ]
                  },
                  {
                    "name": "taskDescriptionWithStartDate",
                    "condition": "true",
                    "priority": 2,
                    "actions": [
                      "data.put('taskDescriptionWithStartDate', data.get('taskDescription') + ' (' + data.get('taskPeriodDueDate') + ')')"
                    ]
                  },
                  {
                    "name": "taskId",
                    "condition": "true",
                    "actions": [
                      "data.put('taskId', fhirPath.extractValue(Task, 'Task.id'))"
                    ]
                  },
                  {
                    "name": "taskFor",
                    "condition": "true",
                    "actions": [
                      "data.put('taskFor', fhirPath.extractValue(Task, 'Task.for.reference'))"
                    ]
                  },
                  {
                    "name": "taskQuestionnaireId",
                    "condition": "true",
                    "actions": [
                      "data.put('taskQuestionnaireId', fhirPath.extractValue(Task, 'Task.reasonReference.reference'))"
                    ]
                  },
                  {
                    "name": "taskName",
                    "condition": "true",
                    "actions": [
                      "data.put('taskName', fhirPath.extractValue(Task, 'Task.reasonCode.coding.display'))"
                    ]
                  },
                  {
                    "name": "taskCode",
                    "condition": "true",
                    "actions": [
                      "data.put('taskCode', fhirPath.extractValue(Task, 'Task.reasonCode.coding.code'))"
                    ]
                  }
                ],
                "views": [
                  {
                    "viewType": "BUTTON",
                    "smallSized": "true",
                    "text": "@{taskDescriptionWithStartDate}",
                    "status": "@{taskStatusColorCode}",
                    "visible": "true",
                    "clickable": "true",
                    "enabled": "@{patientActive}",
                    "actions": [
                      {
                        "trigger": "ON_CLICK",
                        "workflow": "LAUNCH_QUESTIONNAIRE",
                        "questionnaire": {
                          "id": "@{taskQuestionnaireId}",
                          "title": "@{taskDescription}",
                          "saveButtonText": "Save",
                          "taskId": "@{taskId}",
                          "resourceIdentifier": "@{taskFor}"
                        },
                        "params": [
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "patient-dob",
                            "dataType": "STRING",
                            "key": "birthDate",
                            "value": "@{birthDate}"
                          },
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "task-name",
                            "dataType": "STRING",
                            "key": "taskName",
                            "value": "@{taskName}"
                          },
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "task-code",
                            "dataType": "STRING",
                            "key": "taskCode",
                            "value": "@{taskCode}"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "viewType": "CARD",
          "visible": "@{showAtNineMonthsTasks}",
          "padding": 16,
          "header": {
            "viewType": "COMPOUND_TEXT",
            "primaryText": "Immunizations at 9 months",
            "primaryTextColor": "#6F7274",
            "fontSize": 18.0,
            "padding": 16
          },
          "headerAction": {
            "viewType": "COMPOUND_TEXT",
            "visible": "@{atNineMonthsTasksMoreThan1}",
            "primaryText": "Record all",
            "primaryTextColor": "infoColor",
            "fontSize": 18.0,
            "padding": 16,
            "clickable": true,
            "maxLines": 1,
            "textOverflow": "ELLIPSIS",
            "primaryTextActions": [
              {
                "trigger": "ON_CLICK",
                "workflow": "LAUNCH_QUESTIONNAIRE",
                "questionnaire": {
                  "id": "8293",
                  "title": "Record all immunizations",
                  "resourceIdentifier": "@{patientId}",
                  "saveButtonText": "Save",
                  "taskId": "@{taskId}"
                }
              }
            ]
          },
          "content": [
            {
              "viewType": "LIST",
              "id": "at9MonthsTaskList",
              "resources": [
                {
                  "id": "availableTasks",
                  "relatedResourceId": "availableTasks",
                  "resourceType": "Task",
                  "conditionalFhirPathExpression": "(Task.status = 'ready' or Task.status = 'failed' or Task.status = 'cancelled 'or Task.status = 'requested') and Task.groupIdentifier.value = '9_mo'"
                }
              ],
              "emptyList": {
                "message": "No visit tasks available for this patient at the moment"
              },
              "registerCard": {
                "rules": [
                  {
                    "name": "taskStatus",
                    "condition": "true",
                    "actions": [
                      "data.put('taskStatus', fhirPath.extractValue(Task, 'Task.status'))"
                    ]
                  },
                  {
                    "name": "taskStatusColorCode",
                    "condition": "true",
                    "actions": [
                      "data.put('taskStatusColorCode', service.generateTaskServiceStatus(Task))"
                    ]
                  },
                  {
                    "name": "taskExecutionStartDate",
                    "condition": "true",
                    "actions": [
                      "data.put('taskExecutionStartDate', fhirPath.extractValue(Task, 'Task.executionPeriod.start'))"
                    ]
                  },
                  {
                    "name": "taskPeriodDueDate",
                    "condition": "true",
                    "actions": [
                      "data.put('taskPeriodDueDate', service.formatDate(data.get('taskExecutionStartDate'), \"yyyy-MM-dd'T'HH:mm:ss+hh:mm\", \"dd MMM yyyy\"))"
                    ]
                  },
                  {
                    "name": "taskDescription",
                    "condition": "true",
                    "actions": [
                      "data.put('taskDescription', fhirPath.extractValue(Task, 'Task.description'))"
                    ]
                  },
                  {
                    "name": "taskDescriptionWithStartDate",
                    "condition": "true",
                    "priority": 2,
                    "actions": [
                      "data.put('taskDescriptionWithStartDate', data.get('taskDescription') + ' (' + data.get('taskPeriodDueDate') + ')')"
                    ]
                  },
                  {
                    "name": "taskId",
                    "condition": "true",
                    "actions": [
                      "data.put('taskId', fhirPath.extractValue(Task, 'Task.id'))"
                    ]
                  },
                  {
                    "name": "taskFor",
                    "condition": "true",
                    "actions": [
                      "data.put('taskFor', fhirPath.extractValue(Task, 'Task.for.reference'))"
                    ]
                  },
                  {
                    "name": "taskQuestionnaireId",
                    "condition": "true",
                    "actions": [
                      "data.put('taskQuestionnaireId', fhirPath.extractValue(Task, 'Task.reasonReference.reference'))"
                    ]
                  },
                  {
                    "name": "taskName",
                    "condition": "true",
                    "actions": [
                      "data.put('taskName', fhirPath.extractValue(Task, 'Task.reasonCode.coding.display'))"
                    ]
                  },
                  {
                    "name": "taskCode",
                    "condition": "true",
                    "actions": [
                      "data.put('taskCode', fhirPath.extractValue(Task, 'Task.reasonCode.coding.code'))"
                    ]
                  }
                ],
                "views": [
                  {
                    "viewType": "BUTTON",
                    "smallSized": "true",
                    "text": "@{taskDescriptionWithStartDate}",
                    "status": "@{taskStatusColorCode}",
                    "visible": "true",
                    "clickable": "true",
                    "enabled": "@{patientActive}",
                    "actions": [
                      {
                        "trigger": "ON_CLICK",
                        "workflow": "LAUNCH_QUESTIONNAIRE",
                        "questionnaire": {
                          "id": "@{taskQuestionnaireId}",
                          "title": "@{taskDescription}",
                          "saveButtonText": "Save",
                          "taskId": "@{taskId}",
                          "resourceIdentifier": "@{taskFor}"
                        },
                        "params": [
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "patient-dob",
                            "dataType": "STRING",
                            "key": "birthDate",
                            "value": "@{birthDate}"
                          },
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "task-name",
                            "dataType": "STRING",
                            "key": "taskName",
                            "value": "@{taskName}"
                          },
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "task-code",
                            "dataType": "STRING",
                            "key": "taskCode",
                            "value": "@{taskCode}"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "viewType": "CARD",
          "visible": "@{showAtFifteenMonthsTasks}",
          "padding": 16,
          "header": {
            "viewType": "COMPOUND_TEXT",
            "primaryText": "Immunizations at 15 months",
            "primaryTextColor": "#6F7274",
            "fontSize": 18.0,
            "padding": 16
          },
          "headerAction": {
            "viewType": "COMPOUND_TEXT",
            "visible": "@{atFifteenMonthsTasksMoreThan1}",
            "primaryText": "Record All",
            "primaryTextColor": "infoColor",
            "fontSize": 18.0,
            "padding": 16,
            "clickable": true,
            "maxLines": 1,
            "textOverflow": "ELLIPSIS",
            "primaryTextActions": [
              {
                "trigger": "ON_CLICK",
                "workflow": "LAUNCH_QUESTIONNAIRE",
                "questionnaire": {
                  "id": "8293",
                  "title": "Record all immunizations",
                  "resourceIdentifier": "@{patientId}",
                  "saveButtonText": "Save",
                  "taskId": "@{taskId}"
                }
              }
            ]
          },
          "content": [
            {
              "viewType": "LIST",
              "id": "at15MonthsTaskList",
              "resources": [
                {
                  "id": "availableTasks",
                  "relatedResourceId": "availableTasks",
                  "resourceType": "Task",
                  "conditionalFhirPathExpression": "(Task.status = 'ready' or Task.status = 'failed' or Task.status = 'cancelled 'or Task.status = 'requested') and Task.groupIdentifier.value = '15_mo'"
                }
              ],
              "emptyList": {
                "message": "No visit tasks available for this patient at the moment"
              },
              "registerCard": {
                "rules": [
                  {
                    "name": "taskStatus",
                    "condition": "true",
                    "actions": [
                      "data.put('taskStatus', fhirPath.extractValue(Task, 'Task.status'))"
                    ]
                  },
                  {
                    "name": "taskStatusColorCode",
                    "condition": "true",
                    "actions": [
                      "data.put('taskStatusColorCode', service.generateTaskServiceStatus(Task))"
                    ]
                  },
                  {
                    "name": "taskExecutionStartDate",
                    "condition": "true",
                    "actions": [
                      "data.put('taskExecutionStartDate', fhirPath.extractValue(Task, 'Task.executionPeriod.start'))"
                    ]
                  },
                  {
                    "name": "taskPeriodDueDate",
                    "condition": "true",
                    "actions": [
                      "data.put('taskPeriodDueDate', service.formatDate(data.get('taskExecutionStartDate'), \"yyyy-MM-dd'T'HH:mm:ss+hh:mm\", \"dd MMM yyyy\"))"
                    ]
                  },
                  {
                    "name": "taskDescription",
                    "condition": "true",
                    "actions": [
                      "data.put('taskDescription', fhirPath.extractValue(Task, 'Task.description'))"
                    ]
                  },
                  {
                    "name": "taskDescriptionWithStartDate",
                    "condition": "true",
                    "priority": 2,
                    "actions": [
                      "data.put('taskDescriptionWithStartDate', data.get('taskDescription') + ' (' + data.get('taskPeriodDueDate') + ')')"
                    ]
                  },
                  {
                    "name": "taskId",
                    "condition": "true",
                    "actions": [
                      "data.put('taskId', fhirPath.extractValue(Task, 'Task.id'))"
                    ]
                  },
                  {
                    "name": "taskFor",
                    "condition": "true",
                    "actions": [
                      "data.put('taskFor', fhirPath.extractValue(Task, 'Task.for.reference'))"
                    ]
                  },
                  {
                    "name": "taskQuestionnaireId",
                    "condition": "true",
                    "actions": [
                      "data.put('taskQuestionnaireId', fhirPath.extractValue(Task, 'Task.reasonReference.reference'))"
                    ]
                  },
                  {
                    "name": "taskName",
                    "condition": "true",
                    "actions": [
                      "data.put('taskName', fhirPath.extractValue(Task, 'Task.reasonCode.coding.display'))"
                    ]
                  },
                  {
                    "name": "taskCode",
                    "condition": "true",
                    "actions": [
                      "data.put('taskCode', fhirPath.extractValue(Task, 'Task.reasonCode.coding.code'))"
                    ]
                  }
                ],
                "views": [
                  {
                    "viewType": "BUTTON",
                    "smallSized": "true",
                    "text": "@{taskDescriptionWithStartDate}",
                    "status": "@{taskStatusColorCode}",
                    "visible": "true",
                    "clickable": "true",
                    "enabled": "@{patientActive}",
                    "actions": [
                      {
                        "trigger": "ON_CLICK",
                        "workflow": "LAUNCH_QUESTIONNAIRE",
                        "questionnaire": {
                          "id": "@{taskQuestionnaireId}",
                          "title": "@{taskDescription}",
                          "saveButtonText": "Save",
                          "taskId": "@{taskId}",
                          "resourceIdentifier": "@{taskFor}"
                        },
                        "params": [
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "patient-dob",
                            "dataType": "STRING",
                            "key": "birthDate",
                            "value": "@{birthDate}"
                          },
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "task-name",
                            "dataType": "STRING",
                            "key": "taskName",
                            "value": "@{taskName}"
                          },
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "task-code",
                            "dataType": "STRING",
                            "key": "taskCode",
                            "value": "@{taskCode}"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "viewType": "CARD",
          "visible": "@{showAtEighteenMonthsTasks}",
          "padding": 16,
          "header": {
            "viewType": "COMPOUND_TEXT",
            "primaryText": "Immunizations at 18 months",
            "primaryTextColor": "#6F7274",
            "fontSize": 18.0,
            "padding": 16
          },
          "headerAction": {
            "viewType": "COMPOUND_TEXT",
            "visible": "@{atEighteenMonthsTasksMoreThan1}",
            "primaryText": "Record All",
            "primaryTextColor": "infoColor",
            "fontSize": 18.0,
            "padding": 16,
            "clickable": true,
            "maxLines": 1,
            "textOverflow": "ELLIPSIS",
            "primaryTextActions": [
              {
                "trigger": "ON_CLICK",
                "workflow": "LAUNCH_QUESTIONNAIRE",
                "questionnaire": {
                  "id": "8293",
                  "title": "Record all immunizations",
                  "resourceIdentifier": "@{patientId}",
                  "saveButtonText": "Save",
                  "taskId": "@{taskId}"
                }
              }
            ]
          },
          "content": [
            {
              "viewType": "LIST",
              "id": "at18MonthsTaskList",
              "resources": [
                {
                  "id": "availableTasks",
                  "relatedResourceId": "availableTasks",
                  "resourceType": "Task",
                  "conditionalFhirPathExpression": "(Task.status = 'ready' or Task.status = 'failed' or Task.status = 'cancelled 'or Task.status = 'requested') and Task.groupIdentifier.value = '18_mo'"
                }
              ],
              "emptyList": {
                "message": "No visit tasks available for this patient at the moment"
              },
              "registerCard": {
                "rules": [
                  {
                    "name": "taskStatus",
                    "condition": "true",
                    "actions": [
                      "data.put('taskStatus', fhirPath.extractValue(Task, 'Task.status'))"
                    ]
                  },
                  {
                    "name": "taskStatusColorCode",
                    "condition": "true",
                    "actions": [
                      "data.put('taskStatusColorCode', service.generateTaskServiceStatus(Task))"
                    ]
                  },
                  {
                    "name": "taskExecutionStartDate",
                    "condition": "true",
                    "actions": [
                      "data.put('taskExecutionStartDate', fhirPath.extractValue(Task, 'Task.executionPeriod.start'))"
                    ]
                  },
                  {
                    "name": "taskPeriodDueDate",
                    "condition": "true",
                    "actions": [
                      "data.put('taskPeriodDueDate', service.formatDate(data.get('taskExecutionStartDate'), \"yyyy-MM-dd'T'HH:mm:ss+hh:mm\", \"dd MMM yyyy\"))"
                    ]
                  },
                  {
                    "name": "taskDescription",
                    "condition": "true",
                    "actions": [
                      "data.put('taskDescription', fhirPath.extractValue(Task, 'Task.description'))"
                    ]
                  },
                  {
                    "name": "taskDescriptionWithStartDate",
                    "condition": "true",
                    "priority": 2,
                    "actions": [
                      "data.put('taskDescriptionWithStartDate', data.get('taskDescription') + ' (' + data.get('taskPeriodDueDate') + ')')"
                    ]
                  },
                  {
                    "name": "taskId",
                    "condition": "true",
                    "actions": [
                      "data.put('taskId', fhirPath.extractValue(Task, 'Task.id'))"
                    ]
                  },
                  {
                    "name": "taskFor",
                    "condition": "true",
                    "actions": [
                      "data.put('taskFor', fhirPath.extractValue(Task, 'Task.for.reference'))"
                    ]
                  },
                  {
                    "name": "taskQuestionnaireId",
                    "condition": "true",
                    "actions": [
                      "data.put('taskQuestionnaireId', fhirPath.extractValue(Task, 'Task.reasonReference.reference'))"
                    ]
                  },
                  {
                    "name": "taskName",
                    "condition": "true",
                    "actions": [
                      "data.put('taskName', fhirPath.extractValue(Task, 'Task.reasonCode.coding.display'))"
                    ]
                  },
                  {
                    "name": "taskCode",
                    "condition": "true",
                    "actions": [
                      "data.put('taskCode', fhirPath.extractValue(Task, 'Task.reasonCode.coding.code'))"
                    ]
                  }
                ],
                "views": [
                  {
                    "viewType": "BUTTON",
                    "smallSized": "true",
                    "text": "@{taskDescriptionWithStartDate}",
                    "status": "@{taskStatusColorCode}",
                    "visible": "true",
                    "clickable": "true",
                    "enabled": "@{patientActive}",
                    "actions": [
                      {
                        "trigger": "ON_CLICK",
                        "workflow": "LAUNCH_QUESTIONNAIRE",
                        "questionnaire": {
                          "id": "@{taskQuestionnaireId}",
                          "title": "@{taskDescription}",
                          "saveButtonText": "Save",
                          "taskId": "@{taskId}",
                          "resourceIdentifier": "@{taskFor}"
                        },
                        "params": [
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "patient-dob",
                            "dataType": "STRING",
                            "key": "birthDate",
                            "value": "@{birthDate}"
                          },
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "task-name",
                            "dataType": "STRING",
                            "key": "taskName",
                            "value": "@{taskName}"
                          },
                          {
                            "paramType": "PREPOPULATE",
                            "linkId": "task-code",
                            "dataType": "STRING",
                            "key": "taskCode",
                            "value": "@{taskCode}"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}