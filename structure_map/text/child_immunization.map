map "http://hl7.org/fhir/StructureMap/07e945f2-5404-4d32-bc2b-dab08f2fa794" = 'childImmunizationSchedule'

uses "http://hl7.org/fhir/StructureDefinition/Parameters" as source
uses "http://hl7.org/fhir/StructureDefinition/CarePlan" as target

group childImmunizationSchedule(source src : Parameters, target careplan: CarePlan) {
    src -> evaluate(src, $this.parameter.where(name='subject').resource) as subject,
        evaluate(src, $this.parameter.where(name='definition').resource) as definition,
        evaluate(src, $this.parameter.where(name='depends-on').resource.entry.where(resource is QuestionnaireResponse).resource) as questionnaireResponse,
        evaluate(src, $this.parameter.where(name='period').value) as period,
        evaluate(src, $this.parameter.where(name='version').value) as version
        then extractTask(period, version, subject, definition, careplan) "r_careplan";
}

group extractTask(
    source period: Period,
    source version: Integer,
    source subject : Patient,
    source definition: ActivityDefinition,
    target careplan: CarePlan) {

    // fill task into careplan contained and add reference in activity.outcome
    subject -> create('Task') as task,
        // dosage[version] does not work, hence skipping the item from given index via skip.first
        evaluate(definition, $this.dosage.skip(version).first()) as currentDose then {

        subject -> task.id = uuid(),
            task.identifier = create('Identifier') as iden, iden.value = uuid(), iden.use = 'official',
            task.status = 'requested',
            task.intent = 'plan',
            task.executionPeriod = period,
            task.priority = 'routine',
            // dosage[version] does not work, hence skipping the item from given index via skip.first
            task.description = evaluate(definition, $this.product.text + ' ' + currentDose.select(sequence.toString())),
            task.for = create('Reference') as patientReference, patientReference.reference = evaluate(subject, $this.id.replaceMatches('/_history/.*', '')),
            task.basedOn = reference(careplan),
            task.authoredOn = evaluate(subject, now()),
            task.requester = evaluate(subject, $this.generalPractitioner.first()),
            task.owner = evaluate(subject, $this.generalPractitioner.first()),
            task.code = evaluate(definition, code),
            task.reasonCode = evaluate(definition, product) "r_task_data";

        subject then extractPeriod(subject, task) "r_task_period_extraction";

        subject -> task.reasonReference = create('Reference') as reasonReference, reasonReference.reference = 'Questionnaire/11506' "r_task_reason_reference";

        // task groupIdentifier
        subject -> task.groupIdentifier = create('Identifier') as groupIdentifier then {
            subject -> groupIdentifier.value = evaluate(definition, $this.dosage.skip(version).first().select(timing.repeat.period.toString() + '_' + timing.repeat.periodUnit)) "r_group_identifier_value";
            subject -> groupIdentifier.use = "secondary" "r_group_identifier_use";
        } "r_group_identifier";

        subject -> evaluate(task, $this.description) as desc then {
            // BCG
            subject where(desc = 'BCG 0') then {
                subject -> evaluate(subject, "365") as maxDays then extractTaskRestriction(subject, task, definition, version, maxDays) "r_extract_task_restriction_bcg_0";
            } "r_task_restriction_bcg_0";

            // OPV
            subject where(desc = 'OPV 0') then {
                subject -> evaluate(subject, "13") as maxDays then extractTaskRestriction(subject, task, definition, version, maxDays) "r_extract_task_restriction_opv_0";
            } "r_task_restriction_opv_0";

            subject where(desc = 'OPV 1') then {
                subject -> evaluate(subject, "1760") as maxDays then extractTaskRestriction(subject, task, definition, version, maxDays) "r_extract_task_restriction_opv_1";
            } "r_task_restriction_opv_1";

            subject where(desc = 'OPV 2') then {
                subject -> evaluate(subject, "1790") as maxDays then extractTaskRestriction(subject, task, definition, version, maxDays) "r_extract_task_restriction_opv_2";
            } "r_task_restriction_opv_2";

            // PENTA
            subject where(desc = 'PENTA 1') then {
                subject -> evaluate(subject, "1760") as maxDays then extractTaskRestriction(subject, task, definition, version, maxDays) "r_extract_task_restriction_penta_1";
            } "r_task_restriction_penta_1";

            subject where(desc = 'PENTA 2') then {
                subject -> evaluate(subject, "1790") as maxDays then extractTaskRestriction(subject, task, definition, version, maxDays) "r_extract_task_restriction_penta_2";
            } "r_task_restriction_penta_2";

            // ROTA
            subject where(desc = 'ROTA 1') then {
                subject -> evaluate(subject, "210") as maxDays then extractTaskRestriction(subject, task, definition, version, maxDays) "r_extract_task_restriction_rota_1";
            } "r_task_restriction_rota_1";

            subject where(desc = 'ROTA 2') then {
                subject -> evaluate(subject, "240") as maxDays then extractTaskRestriction(subject, task, definition, version, maxDays) "r_extract_task_restriction_rota_2";
            } "r_task_restriction_rota_2";

            // PCV
            subject where(desc = 'PCV 1') then {
                subject -> evaluate(subject, "1760") as maxDays then extractTaskRestriction(subject, task, definition, version, maxDays) "r_extract_task_restriction_pcv_1";
            } "r_task_restriction_pcv_1";

            subject where(desc = 'PCV 2') then {
                subject -> evaluate(subject, "1790") as maxDays then extractTaskRestriction(subject, task, definition, version, maxDays) "r_extract_task_restriction_pcv_2";
            } "r_task_restriction_pcv_2";

            // MR
            subject where(desc = 'MR 1') then {
                subject -> evaluate(subject, "1825") as maxDays then extractTaskRestriction(subject, task, definition, version, maxDays) "r_extract_task_restriction_mr_1";
            } "r_task_restriction_mr_1";

            subject where(desc = 'MR 2') then {
                subject -> evaluate(subject, "1825") as maxDays then extractTaskRestriction(subject, task, definition, version, maxDays) "r_extract_task_restriction_mr_2";
            } "r_task_restriction_mr_2";

            // Boosters
            subject where(desc.contains("Booster")) then {
                subject -> evaluate(subject, "1825") as maxDays then extractTaskRestriction(subject, task, definition, version, maxDays) "r_extract_task_boosters";
            } "r_task_restriction_booster_vaccines";
        } "r_task_restriction_vaccines";

        subject -> evaluate(task, $this.groupIdentifier.value) as groupIdentifierValue then {
            subject where(groupIdentifierValue = '14_wk') then {
                subject -> evaluate(subject, "1825") as maxDays then extractTaskRestriction(subject, task, definition, version, maxDays) "r_task_restriction";
            } "r_create_restriction_end_duration_14_weeks";
        } "r_create_restriction_end_duration";

        //add task.input for task dependencies
        subject -> task.input = create('Task_Input') as inputTask then {
            subject -> inputTask.type = create("CodeableConcept") as concept then {
                subject-> concept.coding = c("http://snomed.info/sct","371154000") as coding then {
                    subject -> coding.display = "Dependent (qualifier value)" "r_coding_display";
                } "r_task_concept_coding";
            } "r_codeable_concept";
            subject -> inputTask.value = 28 "r_input_value";//TODO discuss implementation on how we can make this dynamic for each dosage
        } "r_task_input";

        // dosage info
        subject -> task.input = create('Task_Input') as inputTask then {
            subject -> inputTask.type = create("CodeableConcept") as concept then {
                subject-> concept.coding = c("http://snomed.info/sct", "260911001") as coding then {
                    subject -> coding.display = "Dosage (attribute)" "r_task_input_dosage_type_coding_display";
                } "r_task_input_dosage_type_coding";
            } "r_task_input_dosage_type";
            subject -> inputTask.value = evaluate(definition, currentDose.select(sequence.toString())) "r_task_input_dosage_value";
        } "r_task_input_dosage";

        subject -> evaluate(definition, $this.product.text + ' ' + (currentDose.sequence - 1).toString()) as preReqName,
            evaluate(careplan, $this.contained.where(description.contains(preReqName))) as preReqTask then {

            subject where(preReqTask.exists()) -> task.partOf = create('Reference') as partOfReference then {
                subject -> partOfReference.reference = evaluate(preReqTask, 'Task/' + id) "r_task_reference_id";
            } "r_task_part_of";
        } "r_dosage";

        subject then extractTaskReferenceInput(subject, task, definition, version, careplan) "r_task_reference_input";

        // create activity.detail of type/kind Task for this Task if not exists
        subject where(careplan.activity.where(detail.kind = 'Task').exists().not()) -> careplan.activity = create('CarePlan_Activity') as activity then {
            subject -> activity.detail = create('CarePlan_ActivityDetail') as ActivityDefinition then {
                subject -> ActivityDefinition.kind = 'Task' "r_activity_detail_data";
            } "r_activity_detail";
        } "r_careplan_activity";

        // add task to careplan irrespective of its validity
        subject then {
            subject -> evaluate(careplan, activity.where(detail.kind = 'Task')) as activity, activity.outcomeReference = reference(task) "r_careplan_task_reference";
            subject -> careplan.contained = task "r_add_task";
        } "r_careplan_task";
    } "r_task";
}

group extractTaskReferenceInput(source subject: Patient, target task: Task, source definition: ActivityDefinition, source version: Integer, source careplan: CarePlan) {
    subject -> evaluate(task, $this.partOf.last()) as taskPartOfReference then {
        subject where(taskPartOfReference.empty().not()) then {
            subject -> task.input = create('Task_Input') as inputTask then {
                subject -> inputTask.type = create("CodeableConcept") as concept then {
                    subject-> concept.coding = c("http://snomed.info/sct","900000000000457003") as coding then {
                        subject -> coding.display = "Reference set attribute (foundation metadata concept)" "r_coding_display";
                    } "r_task_concept_coding";
                } "r_codeable_concept";
                subject -> inputTask.value = create('Reference') as partOfReference then {
                    subject -> partOfReference.reference = evaluate(subject, taskPartOfReference.reference.toString()) "r_task_reference_id";
                } "r_task_part_of_reference";
            } "r_task_input";
        } "r_task_part_of_reference_exists";
    } "r_task_part_of_reference";
}

group extractTaskRestriction(source subject: Patient, target task: Task, source definition: ActivityDefinition, source version: Integer, source restrictionEndDate: String) {
    subject -> evaluate(task, $this.executionPeriod.start) as start then {
        subject -> evaluate(subject, $this.birthDate) as patientBirthDate then {
            subject -> create("Task_Restriction") as taskRestriction then {
                subject -> taskRestriction.period = create("Period") as taskRestrictionPeriod then {
                    subject -> taskRestrictionPeriod.start = create('dateTime') as startDateTime,
                        startDateTime.value = evaluate(start, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_extract_task_restriction_period_start";

                    subject -> taskRestrictionPeriod.end = create('dateTime') as endDateTime,
                        endDateTime.value = evaluate(start, (($this + (((restrictionEndDate).toString() + ' days')).toQuantity()).value.substring(0,10)) + 'T00:00:00.00Z') "r_extract_task_restriction_period_end";

                    subject -> task.restriction = taskRestriction "r_extract_task_restriction_period_restriction";
                } "r_extract_task_restriction_period";
            } "r_extract_task_restriction_task_restriction";
        } "r_extract_task_restriction_birth_date";
    } "r_extract_task_restriction";
}

group extractPeriod(source patient: Patient, target task: Task) {
    patient -> evaluate(task, $this.executionPeriod.start) as start, evaluate(task, $this.executionPeriod.end) as end then {
        patient -> create('Period') as period then {
            patient -> period.start = create('dateTime') as startDateTime,
                startDateTime.value = evaluate(start, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_extract_period_executionperiod_start";

            patient -> period.end = create('dateTime') as endDateTime,
                endDateTime.value = evaluate(end, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_extract_period_executionperiod_end";

            patient -> task.executionPeriod = period "r_extract_period_executionperiod";
        } "r_extract_period_period";
    } "r_extract_period";
}